<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter>
  <chapterinfo>
    <author>
      <firstname>Jeff</firstname>
      <surname>Sheltren</surname>
      <affiliation>
	<orgname>Oregon State University (OSU)</orgname>
	<orgdiv>Open Source Labs (OSL)</orgdiv>
      </affiliation>
      <email>jeff@osuosl.org</email>
    </author>
  </chapterinfo> 
  <title>Fixing_the_Code</title>
      <section>
        <sectioninfo>
          <title>Introduction:  Patches Welcome </title>
        </sectioninfo><para>Most open source communities are very welcoming to people who are interested in fixing bugs or adding new features to a project.  Patches are not only welcome, they are encouraged! It's important, however, to know how to create a proper patch and how to submit a patch to a community for possible integration into the code base. </para>
        <para>This chapter introduces the patch file format and shows how to create and apply patches.  It covers patches created both with and without a source code management (SCM) system, and introduces best practices to follow when creating patches and submitting those patches to a FOSS project. </para>
      </section><section>
        <sectioninfo>
          <title>What is a Patch? </title>
        </sectioninfo><para>A <emphasis>patch</emphasis> (also sometimes referred to as a <emphasis>diff</emphasis>) is a text file that shows changes to a file (or multiple files) as compared to a previous version.  Typically, a patch shows line-by-line changes delineated with a '<programlisting format="linespecific">+</programlisting>' (plus sign) or '<programlisting format="linespecific">-</programlisting>' (minus sign) to represent additions and removals in the code, respectively.  Certain patch formats also include surrounding lines of code to provide context and line numbers associated with the changes.</para><para>Patches are the preferred method for submitting changes to a FOSS project.  This is because patches are a standard format and can be easily read and understood by developers familiar with the code base.  A patch can include descriptions of multiple changes to multiple files, and this makes patches a great format for representing bug fixes or code enhancements that may touch many files within the larger project. </para>
        <section>
          <sectioninfo>
            <title>Example of a Simple Patch </title>
          </sectioninfo><para>In this example you generate a small change to a source code file to see how to create a patch.  The file you start with is a simple <emphasis>Hello, World</emphasis> program <programlisting format="linespecific">hello.c</programlisting> written in C.</para><programlisting>/* hello.c - a simple program to print out hello * to the screen */#include &lt;stdio.h&gt;int main() {    printf("Hello, World.\n");    return 0;}</programlisting>
          <para>That output is not too exciting -- instead change the punctuation to an exclamation point to really get some enthusiasm!  The first step in making a change is to create a copy of the file you are working on.  If you are working on code that is in a revision control system this step won't be necessary.  For now, assume this code is not checked out from a repository (you practice creating patches using Subversion later in this chapter.) </para>
          <para>Next, create a backup copy of the file <programlisting format="linespecific">hello.c</programlisting> and name it <programlisting format="linespecific">hello.c.punct</programlisting> so that you know the file is related to your punctuation change. </para><programlisting>$ cp hello.c hello.c.punct</programlisting>
          <para>Next edit <programlisting format="linespecific">hello.c</programlisting> and leave the backup copy <programlisting format="linespecific">hello.c.punct</programlisting> as-is.  Using your favorite editor, open <programlisting format="linespecific">hello.c</programlisting> and change the '<programlisting format="linespecific">.</programlisting>' in the printf statement to be a '<programlisting format="linespecific">!</programlisting>'.  Save the file and exit out of the editor.  Now generate a patch showing the change that was made.  To do this, use the <programlisting format="linespecific">diff</programlisting> command.  Since the <emphasis>unified diff</emphasis> format is considered by many to be easier to read, generate a patch in that format by passing the <programlisting format="linespecific">-u</programlisting> flag to the <programlisting format="linespecific">diff</programlisting> command.  Run the following command to have the patch printed out to your screen:</para><programlisting>$ diff -u hello.c.punct hello.c--- hello.c.punct       2010-03-11 07:57:04.000000000 -0800+++ hello.c     2010-03-11 07:58:54.000000000 -0800@@ -5,6 +5,6 @@ #include &lt;stdio.h&gt; int main() {-    printf("Hello, World.\n");+    printf("Hello, World!\n");     return 0; }</programlisting>
          <para>Examine the output from the <programlisting format="linespecific">diff</programlisting> command. </para><itemizedlist>
            <listitem>
              <para> The first two lines represent the files that are being compared -- showing the file name as well as the last modified date. </para>
            </listitem><listitem>
              <para> Next are one or more <emphasis>hunks</emphasis> (pieces of a file) showing the differences between the files.  In this case, you only have one change, so only one hunk is shown.  Each hunk starts with the <programlisting format="linespecific">@@</programlisting> text and numbers that represent the line numbers displayed in the change for the old (marked with a '<programlisting format="linespecific">-</programlisting>') and new (marked with a '<programlisting format="linespecific">+</programlisting>') files, respectively.</para>
            </listitem><listitem>
              <para> It then outputs the differences between the files.  Since you used the <programlisting format="linespecific">-u</programlisting> flag to set the output to unified format, there are a number of lines shown that have not changed; these are output with a space in front of them. </para>
            </listitem><listitem>
              <para> Lines with a <programlisting format="linespecific">-</programlisting> in front of them have been removed from the first file. </para>
            </listitem><listitem>
              <para> Lines with a <programlisting format="linespecific">+</programlisting> in front of them are additions to the first file. </para>
            </listitem>
          </itemizedlist><para>Notice that your one-line change is actually shown as the removal of an entire line and then an addition of a new, modified line. </para>
          <para>When you ran the <programlisting format="linespecific">diff</programlisting> command you had it output to the screen.  This can be useful when comparing things locally, but in order to share changes with others you should capture that output to a patch file.  Use a simple <emphasis>shell redirect</emphasis> (<programlisting format="linespecific">&gt;</programlisting>) to achieve this.  In order to save the patch as <programlisting format="linespecific">hello-excitement.patch</programlisting>, the following command is used:</para><programlisting>$ diff -u hello.c.punct hello.c &gt; hello-excitement.patch</programlisting>
        </section>
      </section><section>
        <sectioninfo>
          <title>Exercise - Compare  formats </title>
        </sectioninfo><para>Run the <programlisting format="linespecific">diff</programlisting> command again, this time without the <programlisting format="linespecific">-u</programlisting> flag and compare the output to the output when the <programlisting format="linespecific">-u</programlisting> flag is used. </para>
      </section><section>
        <sectioninfo>
          <title>Naming Conventions </title>
        </sectioninfo><para>Patch files are most often created using the <programlisting format="linespecific">.patch</programlisting> file extension, although <programlisting format="linespecific">.diff</programlisting> is also common.  Our recommendation is to use <programlisting format="linespecific">.patch</programlisting> as the file extension unless the project you are working on has a different naming convention.  For the actual file name, it is best to use something descriptive without being too long.  Spaces should be replaced with a dash (<programlisting format="linespecific">-</programlisting>) or an underscore (<programlisting format="linespecific">_</programlisting>) -- choose one and be consistent.  It can also be helpful to include any applicable bug or ticket numbers should the patch fix something described in the project's bug tracking system.  Look at the following example to get a better idea about how best to name a patch file. </para><para>
          <emphasis>Example:</emphasis>  Fixing a bug that caused the date to be output in an incorrect format.  This is bug #1517 in the project's bug tracking system.</para><programlisting>Bad:   date.patchGood:  format-date-output.patchBest:  format-date-output-bug1517.patch</programlisting>
      </section><section>
        <sectioninfo>
          <title>Comparing Multiple Files </title>
        </sectioninfo><para> The above example contained a relatively simple patch.  In general, patches you encounter are likely to be much larger -- representing bigger changes to the code such as the addition of a new feature, or a bug or security fix that may touch multiple files within multiple directories of the code.  These larger patches are still generated in the same manner by using the <programlisting format="linespecific">diff</programlisting> command.  Instead of comparing two files, <programlisting format="linespecific">diff</programlisting> can be used to compare two directories and all of the files contained within. </para><para>Extend the example above by working with a directory, <programlisting format="linespecific">hello/</programlisting>, that contains two files:  the <programlisting format="linespecific">hello.c</programlisting> program you started with in the first example plus a <programlisting format="linespecific">README</programlisting> file that describes the program.  The directory contents and the <programlisting format="linespecific">README</programlisting> file contents are shown below: </para><programlisting>$ ls hello/hello.c  README$ cat hello/READMEThis is a simple program which outputs "hello" to the screen.</programlisting>
        <para>You are going to be making changes to each of these files, so instead of making a backup of each file within the <programlisting format="linespecific">hello/</programlisting> directory, copy the entire directory: </para><programlisting>$ cp -r hello hello.orig</programlisting>
        <para>Now edit the files in the <programlisting format="linespecific">hello/</programlisting> directory to include the exclamation point in the printf statement in <programlisting format="linespecific">hello.c</programlisting> and to update the <programlisting format="linespecific">README</programlisting> file to contain: </para><programlisting>This is a simple program which outputs "hello" to the screen in an enthusiastic manner.</programlisting>
        <para>To create a patch file showing the changes, pass it the directory names rather than the file names: </para>
        <programlisting>$ diff -u hello.orig hello diff -u hello.orig/hello.c hello/hello.c --- hello.orig/hello.c  2010-03-11 09:11:29.612888467 -0800 +++ hello/hello.c   2010-03-11 09:14:39.406763357 -0800 @@ -5,6 +5,6 @@  #include &lt;stdio.h&gt;  int main() { -    printf("Hello, World.\n"); +    printf("Hello, World!\n");      return 0;  } diff -u hello.orig/README hello/README --- hello.orig/README   2010-03-11 09:11:29.612888467 -0800 +++ hello/README    2010-03-11 09:14:58.175763807 -0800 @@ -1 +1 @@ -This is a simple program which outputs "hello" to the screen. +This is a simple program which outputs "hello" to the screen in an enthusiastic manner.</programlisting>
        <para>The output is similar to the previous example, however there are now multiple hunks shown -- one for each change.  In this manner, you can create large changes that touch multiple files and encapsulate all of those changes in a single patch file to easily share with others. </para>
        <programlisting>$ diff -u hello.orig hello &gt; hello-excitement-exercise-X.Y.patch</programlisting>
      </section><section>
        <sectioninfo>
          <title>Patches Generated with Subversion </title>
        </sectioninfo><para>If you read <ulink url="https://www.theopensourceway.org/w/index.php?title=Getting_the_Code">Getting the Code</ulink> about source control management, you may recall seeing a similar <programlisting format="linespecific">diff</programlisting> displayed by using the <programlisting format="linespecific">svn diff</programlisting> command.  If you make changes to your working copy of a Subversion repository,  you are able to see those changes compared to the latest revision you have checked out by running the <programlisting format="linespecific">svn diff</programlisting> command.  The format output by <programlisting format="linespecific">svn</programlisting> is similar to what the <programlisting format="linespecific">diff -u</programlisting> command generates, however, <programlisting format="linespecific">svn</programlisting> is comparing revisions of the same file instead of two different files.  If you were using Subversion in the first example above, the output from <programlisting format="linespecific">svn diff</programlisting> would look similar to this: </para><programlisting>$ svn diff Index: hello.c =================================================================== --- hello.c (revision 1) +++ hello.c (working copy) @@ -5,6 +5,6 @@  #include &lt;stdio.h&gt;  int main() { -    printf("Hello, World.\n"); +    printf("Hello, World!\n");      return 0;  }</programlisting>
        <para>Notice that the lines representing the file names in the <programlisting format="linespecific">svn diff</programlisting> output appear slightly different than what you saw from the <programlisting format="linespecific">diff -u</programlisting> command.  In this case, you are comparing your current working copy to revision 1 of the repository.  Other than that, the output should look very similar.  As with the <programlisting format="linespecific">diff</programlisting> command, you can redirect the output of <programlisting format="linespecific">svn diff</programlisting> to create a patch file. </para><programlisting>$ svn diff &gt; hello-excitement.patch</programlisting>
        <para>When using Subversion or another SCM, you generally want to create patches against the latest <programlisting format="linespecific">HEAD</programlisting> code from the repository.  This means that you should run <programlisting format="linespecific">svn update</programlisting> or similar before creating your patch.  This makes it easier for the project's maintainers to include your patch once you submit it. </para>
      </section><section>
        <sectioninfo>
          <title>Applying a Patch </title>
        </sectioninfo><para> You've looked at one side of the patch process, creating a patch to describe changes to a code base.  The other side of patching is being able to apply a patch to an unchanged (also known as <emphasis>pristine</emphasis> or <emphasis>vanilla</emphasis>) code base.  Patches are created using the <programlisting format="linespecific">diff</programlisting> command and are applied using the <programlisting format="linespecific">patch</programlisting> command.  In the simplest form, a patch can be applied by feeding the input of a patch file into the <programlisting format="linespecific">patch</programlisting> command:</para><programlisting>$ patch &lt; new-feature.patch</programlisting>
        <para>The above command assumes that the files to be patched are located in the same directory in which you are running the <programlisting format="linespecific">patch</programlisting> command.  Another common way to run <programlisting format="linespecific">patch</programlisting> is using the <programlisting format="linespecific">-p</programlisting> flag followed by a number indicating the number of directory layers to strip off of the filenames specified in the patch.  This makes sense when running <programlisting format="linespecific">patch</programlisting> from the root directory of the code in question.  Using <programlisting format="linespecific">-p0</programlisting> passes <programlisting format="linespecific">patch</programlisting> the entire filename unmodified.  This is generally the standard for submitted patches. </para><programlisting>$ patch -p0 &lt; fix-output-display.patch</programlisting>
        <para>Of course, whether you use <programlisting format="linespecific">-p0</programlisting>, <programlisting format="linespecific">-p1</programlisting>, or no <programlisting format="linespecific">-p</programlisting> flag at all depends on how the patch was created.  The <programlisting format="linespecific">patch</programlisting> manual page (accessed by typing <programlisting format="linespecific">man patch</programlisting> on the command line of a Linux machine) contains a description of the <programlisting format="linespecific">-p</programlisting> and other options that can be used with the <programlisting format="linespecific">patch</programlisting> command. </para>
      </section><section>
        <sectioninfo>
          <title>Submitting a Patch </title>
        </sectioninfo><para>Once you have created a patch that you would like to see included in a FOSS project, it's important to submit the patch in a manner appropriate for that project.  In some cases, this may mean creating a patch with certain flags passed to the <programlisting format="linespecific">diff</programlisting> command; in other cases, it may mean writing an email to a development email list attaching your patch file and writing a description of the code change.  When in doubt, ask a developer!  Most developers would be very happy to help you submit your first patch as they know it may lead to you contributing even more to the project. </para><para>Here are some general guidelines to follow submitting a patch: <itemizedlist>
            <listitem>
              <para> Read the developer documentation for the project.  This may contain preferences for how patches are formatted, or other general coding guidelines.  As an example, refer to the <ulink url="http://git.kernel.org/?p=git/git.git;a=blob;f=Documentation/SubmittingPatches"> patch submission guidelines for the git project</ulink>. </para>
            </listitem><listitem>
              <para> If your patch is related to an existing ticket or bug report, either update the ticket to include your patch or if the patch needs to be submitted externally, be sure to reference the bug or ticket number so that people are aware of the connection. </para>
            </listitem><listitem>
              <para> In most cases, you should create a patch against the current <programlisting format="linespecific">HEAD</programlisting> of the development tree.  If your patch was created against another version of the code, be sure to make that known. </para>
            </listitem>
          </itemizedlist>
        </para><para>Don't be surprised or offended if your patch is not accepted for inclusion into a project's code.  This can happen for a number of reasons: <itemizedlist>
            <listitem>
              <para> Your code may not meet coding guidelines for the project.  Don't let this discourage you.  This is a great opportunity to improve your coding skills by learning what is required for this particular project and then re-submit another patch. </para>
            </listitem><listitem>
              <para> One of the main developers on the project may think you've provided a useful idea, but that it may need to be implemented in a different way.  Again, don't get discouraged should this happen, but try to use it as a learning opportunity. </para>
            </listitem>
          </itemizedlist>
        </para>
      </section><section>
        <sectioninfo>
          <title>Exercise - Create a Patch for a New File </title>
        </sectioninfo><para>Create a patch file that represents a new file, <programlisting format="linespecific">foo</programlisting> being created with the contents <programlisting format="linespecific">bar</programlisting>.  Hint: on Linux systems, the file <programlisting format="linespecific">/dev/null</programlisting> represents an empty file -- use that as one of the files you are comparing. </para>
      </section><section>
        <sectioninfo>
          <title>Exercise - Patch </title>
        </sectioninfo><para>
          <emphasis>(Adapted from <ulink url="http://wiki.oss-watch.ac.uk/MakeASimplePatch"> Make A Simple Patch</ulink> under <ulink url="http://creativecommons.org/licenses/by-sa/2.0/uk/"> Creative Commons Attribution-ShareAlike 2.0 England &amp; Wales Licence</ulink>.)</emphasis>
        </para><para>Patch the <programlisting format="linespecific">echo</programlisting> command from the <programlisting format="linespecific">coreutils</programlisting> project so that it echoes out arguments in reverse order. </para><para>Download the latest <programlisting format="linespecific">coreutils</programlisting> compressed archive file (or <emphasis>tarball</emphasis>) (8.4 as of this writing) from <ulink url="http://ftp.gnu.org/gnu/coreutils/coreutils-8.4.tar.gz">http://ftp.gnu.org/gnu/coreutils/coreutils-8.4.tar.gz</ulink>
          <programlisting>$ curl -O http://ftp.gnu.org/gnu/coreutils/coreutils-8.4.tar.gz</programlisting> Open the tarball to create a <programlisting format="linespecific">coreutils-8.4</programlisting> directory containing the source code <programlisting>$ tar zxf coreutils-8.4.tar.gz</programlisting> Edit the file <programlisting format="linespecific">src/echo.c</programlisting> in order to modify the <programlisting format="linespecific">echo</programlisting> command.  First, create a backup copy of that file: <programlisting>$ cd coreutils-8.4/src$ cp echo.c echo.c.reverse</programlisting> Now, edit the file <programlisting format="linespecific">echo.c</programlisting>.  The code to modify is near the very bottom of the file -- go to line 261 and change the following block of code: <programlisting>while (argc &gt; 0)        {          fputs (argv[0], stdout);          argc--;          argv++;          if (argc &gt; 0)            putchar (' ');        }</programlisting> Update the code to be: <programlisting>while (argc &gt; 0)        {          argc--;          fputs (argv[argc], stdout);          if (argc &gt; 0)            putchar (' ');        }</programlisting> Create a patch to represent your change by changing in to the directory and running the following <programlisting format="linespecific">diff</programlisting> command: <programlisting>$ cd coreutils-8.4$ diff -u src/echo.c.reverse src/echo.c &gt; echo-reverse-output.patch</programlisting> Your patch file should look something like: <programlisting>--- src/echo.c.reverse  2010-03-14 09:45:40.959888410 -0700+++ src/echo.c  2010-03-14 09:51:58.189768045 -0700@@ -260,9 +260,8 @@     {       while (argc &gt; 0)         {-          fputs (argv[0], stdout);           argc--;-          argv++;+          fputs (argv[0], stdout);           if (argc &gt; 0)             putchar (' ');         }</programlisting> If you want to test out your changes, run the following commands to build the code: <programlisting>$ ./configure$ make</programlisting> You should now have a working <programlisting format="linespecific">echo</programlisting> binary.  You can run the following command to test it out: <programlisting>$ src/echo is this reversedreversed this is</programlisting>
        </para>
      </section><section>
        <sectioninfo>
          <title>Exercise - Fix a Real FOSS Bug </title>
        </sectioninfo><para>Look through the bug tracking system for a project that you are interested in and find a small bug to fix.  Create a patch file for that bug and submit it to the project for inclusion in the code.</para>
      </section>
</chapter>
