<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter>
  <chapterinfo>
    <author>
      <firstname>Greg</firstname>
      <surname>DeKoenigsberg</surname>
      <affiliation>
	<orgname>Red Hat</orgname>
	<orgdiv>Community Architecture</orgdiv>
      </affiliation>
      <email>gdk@redhat.com</email>
    </author>
  </chapterinfo> 
  <title>Introduction_to_Free_and_Open_Source_Software</title>
  <section>
        <sectioninfo>
          <title>Introduction </title>
        </sectioninfo><para>Free and Open Source Software, or <emphasis>FOSS</emphasis> for short, is software for which the <emphasis>source code</emphasis> can be freely shared, with anyone, for any purpose.</para><para>There are more rigorous definitions, and there are many licenses that help to ensure these freedoms in subtly different ways.  We examine these details later in the book.  For now, focus on this simple idea: the freedom to share source code is the essential element of free and open source software. </para>
        <para>At the end of this chapter, you should: </para>
        <itemizedlist>
          <listitem>
            <para> Understand the difference between <emphasis>source code</emphasis> and <emphasis>binary code</emphasis>;</para>
          </listitem><listitem>
            <para> Understand some of the benefits of using FOSS; </para>
          </listitem><listitem>
            <para> Understand some of the benefits of participating in FOSS projects; </para>
          </listitem><listitem>
            <para> Have an idea of some FOSS projects that might interest you, and why; </para>
          </listitem><listitem>
            <para> Have the beginning of your own FOSS portfolio. </para>
          </listitem>
        </itemizedlist>
      </section><section>
        <sectioninfo>
          <title>Why does FOSS matter to me? </title>
        </sectioninfo><para>Free and Open Source Software matters because it's real, and because you, the student, can see in to the guts of it.  And when you go out into the real world, looking for a job as a Real Software Developer, you have a tremendous advantage if you can prove that you have experience in real software projects -- ugly, messy, confusing, gigantic software projects. </para>
        <para>Without FOSS, getting experience in real software projects requires access, and probably permission, to see the source code.  For students, that access is usually limited to those who can get <emphasis>internships</emphasis> or positions in <emphasis>co-op</emphasis> programs. Not everyone has the opportunity to spend the summer interning with a company that does large-scale software development, meaning that a vanishingly small number of students have the opportunity to work with large (closed) codebases. And even if they do, those students typically  cannot show their work to anyone outside of the sponsoring company.</para><para>In the world of FOSS, the source code is available to anyone who wants to see it.  Not only is the source code available -- also available are all of the interesting challenges that go with managing large software projects. In this book, we explore a number of these challenges and help you engage in them in direct and practical ways. </para>
        <section>
          <sectioninfo>
            <title>Source Control </title>
          </sectioninfo><para> How do fifteen software engineers work on the same piece of software together?  When two software engineers decide independently to edit the same line of code, what happens?  In the world of FOSS, we make use of version control systems to help avoid these kinds of problems. Without version control, it's a disaster, which is why we cover version control in the chapter entitled (XREF) "Getting the Code: Source Code Management". </para>
        </section>
      </section><section>
        <sectioninfo>
          <title>Build Systems </title>
        </sectioninfo><para>Complex software is built in different <emphasis>modules</emphasis>.  Those modules have different names in every language -- <emphasis>packages</emphasis>, <emphasis>libraries</emphasis>, etc. -- but modularity is always introduced to help manage the complexity of large projects. One software project may <emphasis>import</emphasis> dozens, or even hundreds, of previously built software modules.  What happens when one of those modules changes?  If you don't know how those modules fit together, it's a disaster.  Which is why we cover <emphasis>build management</emphasis> in the chapter entitled (XREF) "Building the Code: From Source to Executable".</para>
      </section><section>
        <sectioninfo>
          <title>Documentation </title>
        </sectioninfo><para>There's also a lot more to good software than code. How do you make sure people have the resources and knowledge they need to find and run (and contribute to) the software that you make? Beautiful code that doesn't get used is just as useful as code that was never written. Which is why we cover <emphasis>documentation</emphasis> in the chapter entitled (XREF) "Explaining the Code: the Art of Documentation".</para>
      </section><section>
        <sectioninfo>
          <title>Tracking Bugs </title>
        </sectioninfo><para>Most code is buggy.  Even the very best code can still have bugs, which means the ability to find and eliminate bugs is a critical skill for all software engineers.  If you don't know how to find the bugs your users find, you're in trouble.  Which is why we cover bug hunting in the chapter entitled (XREF) "Debugging the Code: Finding and Reporting Bugs", and we cover the mechanics of fixing code in the chapter entitled (XREF) "Fixing the Code: Patches Welcome". </para>
      </section><section>
        <sectioninfo>
          <title>Experiencing the Software Lifecycle </title>
        </sectioninfo><para>There's a saying about software programs: they're never finished, only abandoned.  There's always more work to do to improve any software project.  The thing that makes FOSS so unique, and so interesting to the aspiring programmer, is that anyone can participate in a FOSS project.  Most large projects can benefit from contribution by even novice programmers.  There are also more FOSS projects than ever before, with an almost unlimited number of interesting problems.  Want to learn how web browsers work?  Hack on Firefox.  Want to put together an awesome multilingual book reader for the blind?  Hack on espeak. </para>
        <para>The key is to find a project that interests you. </para>
      </section><section>
        <sectioninfo>
          <title>Exercise - Finding a Cool Project </title>
        </sectioninfo><para>Imagine that you have just been hired as a programmer for FOSS Inc., and your manager has told you that you must spend 20% of your time to work on a FOSS project that matters to you.   </para>
        <orderedlist numeration="arabic">
          <listitem>
            <para> First, search the web and <emphasis>find sites that </emphasis>
              <emphasis>
                <emphasis>host</emphasis>
              </emphasis><emphasis> FOSS projects</emphasis>. There are many. Bookmark these so that you can come back to them later.</para>
          </listitem><listitem>
            <para> Second, <emphasis>browse through several of these sites</emphasis> and find one or more projects that are interesting to you. You might be interested in projects that benefit others. You might be interested in tools that support work that you do. Or, it might be that you might find something strikes your fancy that you never considered before! Take this as an opportunity to explore broadly.</para>
          </listitem><listitem>
            <para> After you find a project, <emphasis>write a blog post about it</emphasis>. At this point, the most important thing you can probably do is to explain why the project is interesting to you.</para>
          </listitem>
        </orderedlist><para>If you don't have a blog, set one up for free!  Visit <ulink url="http://blogger.com"> Blogger</ulink> or <ulink url="http://wordpress.com"> Wordpress</ulink>; setting up a new blog is easy. Blogs are widely used in the FOSS world by project members to share what they're doing. Your voice will become one of many, and who knows -- your blog might become a resource that other students later look to for inspiration when they are looking for projects to get involved in! </para>
      </section><section>
        <sectioninfo>
          <title>What is source code? </title>
        </sectioninfo><para>Let's start with an explanation of <emphasis>source code</emphasis>.  One cannot understand <emphasis>open source</emphasis> without first understanding <emphasis>source</emphasis>.</para><para>Source code is a set of instructions for computers that is meant to be read and written by humans. </para>
        <para>Here's an example of source code, in the C programming language, for a simple, but complete, program. </para>
        <programlisting>#include &lt;stdio.h&gt;main() { for(;;) { printf ("Hello World!\n"); } }</programlisting>
        <para>In order to run this program, it must be compiled into machine code.  First, we save the program into a file called <programlisting format="linespecific">hello.c</programlisting>. Then, we compile it: </para><programlisting>gcc -o hello hello.c</programlisting>
        <para>The command is <programlisting format="linespecific">gcc</programlisting>, which stands for "GNU Compiler Collection." The flag <programlisting format="linespecific">-o</programlisting> sets the name of the program that we are about to generate; here, we've decided to call it <programlisting format="linespecific">hello</programlisting>. The last argument is the name of the source file that we want to compile (<programlisting format="linespecific">hello.c</programlisting>). After compiling the program, you should be able to run it. To run the program, type: </para><programlisting>./hello</programlisting>
        <para>at the prompt. This says "run the program called <programlisting format="linespecific">hello</programlisting> that is in the current directory." When run, this program will print <programlisting format="linespecific">Hello World!</programlisting> until we kill the program. Hold down the <emphasis>CTRL</emphasis> key and press the <emphasis>C</emphasis> key to kill the program's execution.  </para><para>At this point, you have two files in your directory: <programlisting format="linespecific">hello.c</programlisting>, the source code,  and <programlisting format="linespecific">hello</programlisting>, the program binary. That binary is a piece of that machine code. You can open it with a program called <programlisting format="linespecific">hexdump</programlisting> that will let you see the binary in a hexidecimal form. You can do this yourself on the command line: </para><programlisting>hexdump hello</programlisting>
        <para>We've reproduced some of what it looks like when <programlisting format="linespecific">hello</programlisting> is viewed in <programlisting format="linespecific">hexdump</programlisting> after <programlisting format="linespecific">hello.c</programlisting> has been compiled by <programlisting format="linespecific">gcc</programlisting>: </para><programlisting>0000000 457f 464c 0101 0001 0000 0000 0000 00000000010 0002 0003 0001 0000 8300 0804 0034 00000000020 0820 0000 0000 0000 0034 0020 0008 00280000030 001e 001b 0006 0000 0034 0000 8034 08040000040 8034 0804 0100 0000 0100 0000 0005 00000000050 0004 0000 0003 0000 0134 0000 8134 08040000060 8134 0804 0013 0000 0013 0000 0004 00000000070 0001 0000 0001 0000 0000 0000 8000 08040000080 8000 0804 0518 0000 0518 0000 0005 00000000090 1000 0000 0001 0000 0518 0000 9518 080400000a0 9518 0804 00fc 0000 0104 0000 0006 000000000b0 1000 0000 0002 0000 052c 0000 952c 080400000c0 952c 0804 00c8 0000 00c8 0000 0006 000000000d0 0004 0000 0004 0000 0148 0000 8148 080400000e0 8148 0804 0044 0000 0044 0000 0004 000000000f0 0004 0000 e550 6474 04a4 0000 84a4 08040000100 84a4 0804 001c 0000 001c 0000 0004 00000000110 0004 0000 e551 6474 0000 0000 0000 00000000120 0000 0000 0000 0000 0000 0000 0006 00000000130 0004 0000 6c2f 6269 6c2f 2d64 696c 756e0000140 2e78 6f73 322e 0000 0004 0000 0010 00000000150 0001 0000 4e47 0055 0000 0000 0002 00000000160 0006 0000 0012 0000 0004 0000 0014 00000000170 0003 0000 4e47 0055 ac29 394b 26bf 01f10000180 e396 f820 3c24 f98c 8c5a 8909 0002 00000000190 0004 0000 0001 0000 0005 0000 2000 200000001a0 0000 0000 0004 0000 4bad c0e3 0000 000000001b0 0000 0000 0000 0000 0000 0000 0001 000000001c0 0000 0000 0000 0000 0020 0000 002e 000000001d0 0000 0000 0000 0000 0012 0000 0029 000000001e0 0000 0000 0000 0000 0012 0000 001a 000000001f0 848c 0804 0004 0000 0011 000f 5f00 675f</programlisting>
        <para>That's only a small chunk of the program binary.  The full binary is much larger -- even though the source code that produces this binary is only two lines long. </para>
        <para>As you can see, there's a huge difference between <emphasis>source code</emphasis>, which is intended to be read and written by humans, and <emphasis>binary code</emphasis>, which is intended to be read and written by computer processors.</para><para>This difference is a crucial one for programmers who need to modify a computer program.  Let's say you wanted to change the program to say "Open source is awesome!!!".  With access to the source code, making this change is trivial, even for a novice programmer.  Without access to the source code, making this change would be incredibly difficult.  And this for two lines of code. </para>
        <section>
          <sectioninfo>
            <title>Exercise - Change the source code </title>
          </sectioninfo><para> Change the source code to print out "Open source is awesome!!!" instead of "Hello World!".  Spend no more than half an hour on this exercise. </para>
        </section>
      </section><section>
        <sectioninfo>
          <title>Optional Exercise - Change the binary code </title>
        </sectioninfo><para> Change the binary code to print out "FOSS ROXORS!" instead of "Hello World!". Spend no more than half a day on this exercise. </para>
        <para>This is actually a tricky exercise, and it could take you a fair bit of time. We included it here because you might be curious and want to go poking around in the binary. Under most flavors of Linux you should be able to find or install a program called <programlisting format="linespecific">hexedit</programlisting>. To get you started, you use <emphasis>TAB</emphasis> to switch from hex to ASCII, <emphasis>/</emphasis> to search, and <emphasis>F2</emphasis> to save your changes. You can read the rest of the documentation for <programlisting format="linespecific">hexedit</programlisting> by reading the manpage, which you can get to by typing <programlisting format="linespecific">man hexedit</programlisting> on the command line, or pressing <emphasis>F1</emphasis> while running <programlisting format="linespecific">hexedit</programlisting>.</para>
      </section><section>
        <sectioninfo>
          <title>Source Code: To Share, or Not To Share? </title>
        </sectioninfo><para>Obviously, not all software is FOSS.  </para>
        <para>Most software developers do not share their source code -- especially companies that produce software with the intention of selling it to their customers.  Microsoft, for example, does not share the source code for the Windows operating system. </para>
        <para>Even freeware -- programs that are downloadable for free from the internet -- may not share their source code with the world. You can get the program for free, but if it breaks, or if you think of a way to make it better, there's no good way to fix it.  For example, you can get the Flash Player from Adobe for free, but if you find a bug that crashes Firefox, you're stuck with that bug until Adobe fixes it. </para>
        <para>There are definite advantages to keeping source code hidden, especially if your goal is to sell the software itself.  It's harder to sell a software program when anyone is free to take the source code and use it for any purpose.  If Microsoft were to release the Windows source code under an open source software license, anyone would then be able to take that source code, build "Bob's Own Operating System," maybe make a few changes, and then re-sell that product as a competitor to Microsoft Windows.  Obviously, most companies who are selling commercial software don't want that to happen. </para>
        <section>
          <sectioninfo>
            <title>The value of sharing </title>
          </sectioninfo><para>That's not to say that programmers who write open source software never make money.  Some of the most successful companies in the world use open source software to power their businesses.  Google, Amazon, Wall Street, the US Department of Defense -- some of the world's largest and most innovative companies, government agencies, and industries are writing software using FOSS every day.  They don't sell that code; they share it, and by sharing, create more value for their organizations. </para>
          <para>The amazing thing about contributing to FOSS software is that you don't have to work for a large company to see the benefits of working in a free and open manner. As a developers, you might write a utilities that solves a particular problem. By sharing it, others might discover the utility of your tool. Others might extend it and help see it grow. At this point, what started as a hack has become something valuable for many. At this point, we begin to see how FOSS development practices can provide demonstrable advantages over proprietary software development practices.  Among them: </para>
          <itemizedlist>
            <listitem>
              <para>
                <emphasis>Shared development cost.</emphasis>  Writing software can be expensive, at least in terms of time.  Good software takes time to develop, and time is money.  And if writing software is expensive, then maintaining it is even more expensive.  In the FOSS model, the cost of the writing and maintaining the software can be spread out over several individuals and/or companies.</para>
            </listitem><listitem>
              <para>
                <emphasis>Users can fix their own bugs.</emphasis>  This is not a freedom that is obviously useful to everybody.  Not every software user is knowledgeable enough to fix a bug when they find it.  That's fine; FOSS also means that users can find other people to fix their bugs for them.  Not everybody who owns a car is competent to change their own oil, but the freedom to change your oil, or fix a flat tire, or rebuild your own brakes -- or the freedom to be able to go to any mechanic or any mechanically inclined friend and ask them to do it for you -- is a crucial freedom to car owners.  FOSS extends that freedom to software.</para>
            </listitem><listitem>
              <para>
                <emphasis>(Arguably) better software.</emphasis>  Allowing users to fix bugs can often lead to better software. One of the problems with proprietary software is that there's a limit to the number of people you can pay to fix code -- that limit is usually directly proportional to how many software licenses the company can sell.   FOSS projects have the potential to build a huge base of participants, far greater than the number of developers that any one company could pay.   The Apache HTTP server project is a great example of a FOSS project with many developers, both commercial and independent -- that has created <ulink url="http://news.netcraft.com/archives/web_server_survey.html"> demonstrably more popular</ulink> and arguably better software than any of its proprietary counterparts. </para>
            </listitem><listitem>
              <para>
                <emphasis>Software that outlives its creator.</emphasis>  There are literally thousands and thousands of pieces of software, written for outdated computers, that are no longer useful for any purpose.  If we had source code for these pieces of software, we might be able to extend them to new computers, making them continually more useful and more interesting -- but because we don't have the source code for these programs, we have very little use for them anymore.  There's a word for this kind of software: <emphasis>abandonware</emphasis>.  In FOSS, there's no such thing as abandonware.  Sure, people may stop working on a piece of software, but the source is always there, ready to be picked up and carried forward by anyone who has the time and interest to do so.  Every dead FOSS project has a chance to be reborn.</para>
            </listitem><listitem>
              <para>
                <emphasis>The freedom to fork.</emphasis>  Sometimes software projects go wrong.  If a project is proprietary, no one has any recourse if they don't like the direction of the project: the owner of the project decides the direction of the project, period.  But because FOSS guarantees everybody the right to redistribute and modify the source code, developers can always take a FOSS project and move it in a new direction, without anybody's permission.  This process is called <emphasis>forking</emphasis>.  Forks are usually regarded as last resorts, since contentious forks can divide scarce developer resources and confuse users.  However, a number of FOSS projects have benefited greatly from forks; the <ulink url="http://en.wikipedia.org/wiki/XFree86#Forks_of_XFree86"> X.org server</ulink> and <ulink url="http://en.wikipedia.org/wiki/Inkscape"> Inkscape</ulink> are notable successful forks.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section><section>
        <sectioninfo>
          <title>Exercise - List of software </title>
        </sectioninfo><para> Create a list of all the software that you use on a regular basis.  Which software is FOSS?  Which applications have FOSS equivalents?  What are those equivalents? </para>
      </section><section>
        <sectioninfo>
          <title>Exercise - Compare and contrast similar proprietary and FOSS software  </title>
        </sectioninfo><para> Choose one piece of proprietary software that you use regularly and find its FOSS equivalent if it has one. (If not, pick another program.)  Write a blog post comparing the two.  Don't just look at the code; look at the entire experience. How are the user interfaces different or similar? What about the user's experience overall? Is the quality of the documentation comparable?  Is one buggier than the other? (This may take some spelunking in forums, looking for bug reports, etc?)  </para>
        <para>What, in your estimation, would it take for a new user to switch from the proprietary, closed-source software to the FOSS equivalent? </para>
      </section><section>
        <sectioninfo>
          <title>Exercise - Install a new FOSS tool and blog about it </title>
        </sectioninfo><para> Go find a new piece of open source software that interests you.  Install it, and blog about any problems that you have.  Bear in mind that your notes may come in handy during later exercises. </para>
      </section><section>
        <sectioninfo>
          <title>Climbing Contributor Mountain </title>
        </sectioninfo><para>Participation in FOSS projects is similar, in many ways, to an apprenticeship.  It takes some effort, and some help, to work your way to the top.  Let's watch the path a typical newbie takes up Contributor Mountain. </para>
        <para>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="https://www.theopensourceway.org/w/index.php?title=File:Contributor_Mountain-0.1.png" scalefit="1"/>
            </imageobject><caption>
              <para/>
            </caption>
          </inlinemediaobject>
        </para><section>
          <sectioninfo>
            <title>User </title>
          </sectioninfo><para>Everyone begins at the base of the mountain as a user of software. Let's take our hypothetical friend Alice as an example. </para>
          <para>Alice is a budding artist, and she likes to share her work with friends online.  She's a big fan of anime.  One of her friends suggests that she might be interested in a program called <emphasis>Inkscape</emphasis>, a cool illustration program. </para><para>So Alice goes and downloads Inkscape and installs it on her computer.  She plays with it.  She doesn't understand it very well, but it seems kinda cool.  </para>
          <para>Then her friend points her to a couple of Inkscape anime tutorials online, and Alice's opinion of Inkscape changes from "kinda cool" to "incredibly cool."  Within a few short months and a lot of practice, Alice becomes a devoted Inkscape user. As it happens, developers sometimes forget that <emphasis>users are the reason that software exists</emphasis>. Alice, in becoming a devoted and expert user of Inkscape has taken the first, critical steps to being a valuable contributor to the Inkscape project.</para><para>Note: Alice may not yet know, or care, that Inkscape is FOSS software; in fact, she probably doesn't even know what FOSS is.  It's irrelevant to her.  She loves the fact that Inkscape is freely available, which is one of the great features of FOSS software -- but beyond that, the concept of FOSS just isn't meaningful to her.  Yet. </para>
        </section>
      </section><section>
        <sectioninfo>
          <title>Seeker </title>
        </sectioninfo><para>The Internet has changed the way we ask questions.  Billions of people can now go to a web page, ask almost any imaginable question, and get some kind of response -- maybe right, maybe dramatically wrong, but some kind of response.  It is this experience that is, in no small part, why the word "google" is now a verb. Alice, without realizing it, will quickly move from a "User" of Inkscape to a "Seeker" of information. </para>
        <para>Our friend Alice has a problem.  She has an Inkscape file with lots of cool images that some of her friends have made, and she wants to use them as part of a new illustration she's working on.  But when she opens that file, and then tries to cut and paste into a new document, Inkscape crashes.  Well, it crashes <emphasis>sometimes</emphasis>.  And this unpredictability is becoming annoying -- so Alice goes to her favorite online anime discussion forum to ask her friends if they're seeing this problem. </para><para>One friend recommends that she go ask on the Inkscape developers mailing list.  Another friend recommends that she file a bug.  A third friend asks for more details: when does it happen?  Does it happen randomly, or can she make it happen by doing a particular thing over and over?  Then another person pops up and says that yes, he's had that problem too, but he works around it by opening his documents in a certain order.  After some back-and-forth with this new friend, trying to figure out exactly what he means, Alice figures out the workaround: no more crashes!  Alice thanks everyone for their help and gets back to her project. </para>
        <para>Alice has become a seeker.  By looking for answers, Alice has discovered a broad community of people who are willing to help her figure out how to do things a better way. </para>
      </section><section>
        <sectioninfo>
          <title>Collaborator </title>
        </sectioninfo><para>This bug still bugs Alice.  </para>
        <para>When she forgets about the workaround, the bug still bites her.  Lately, some of the other people who hang out on her anime forums have been complaining about this bug, too, and she always points them to the forum thread where she learned about the workaround.  But still she wonders: when is it going to get fixed? </para>
        <para>And then she wonders: is there anything I can do about it? </para>
        <para>This crucial step is what makes FOSS unique: it's the step at which Alice decides to become a collaborator. </para>
        <para>Why?  Good question.  Contributors to FOSS have many different reasons -- but a frequently heard rationale is the desire to "scratch an itch."  Alice loves Inkscape, but she hates this bug. </para>
        <para>She thinks back to the forum discussion in which one of her friends advised her to "file a bug."  She's not even quite sure what that means, exactly, but now that she's decided she wants to help, she starts looking around.  After a bit of googling and sorting through some stuff that doesn't make any sense to her at all, she finds a page on the Inkscape wiki that tells her what to do.  </para>
        <para>One sentence stands out: "Check the bug tracker first; your bug may be already there." So she goes to the Inkscape bug tracker and searches for "crash", and finds a ton of bugs -- seems like software crashes a lot!  She tries a few more search terms (like "copy" and "paste"), and the number of bugs she has to look through starts to drop. Alice's search through the bugs uncovers a great deal that  she doesn't quite understand... until she finds a bug that looks almost exactly like her bug!  She sees some comments on the bug that say things like "I've confirmed this on my Ubuntu system" and so on -- so she creates an account for the Inkscape bug tracker, and adds her comment, confirming that she, too, has experienced this bug on her Mac Powerbook.  Two months later, she receives an email that the latest version will contain a fix. </para>
        <para>Even a seemingly small collaboration can be useful. </para>
      </section><section>
        <sectioninfo>
          <title>Contributor </title>
        </sectioninfo><para>The line between collaborator and contributor can be a blurry line, and there are many ways to define contribution, but here's one good way of thinking about it: a contributor is a person that a FOSS community actively relies upon for help. </para>
        <para>Of course, some contributors focus on writing code -- but for the most successful projects, this is a comparatively small percentage of contributors.  Some contributors maintain a wiki and help keep it up to date.  Some contributors test every new beta version the day it's released.  Some write documentation about the project.  Some go through bug reports, to make sure that bugs are useful for developers.  Some blog about the new features to help spread the word. </para>
        <para>All of these contributors are making their projects better -- and <emphasis>every FOSS project needs more of these kinds of contributors.</emphasis>
        </para><para>It is our hope that this book will help guide you, the reader, to the top of the Contributor Mountain. </para>
      </section><section>
        <sectioninfo>
          <title>Building Your FOSS Portfolio </title>
        </sectioninfo><para>Perhaps the greatest benefit of contributing to FOSS projects: you have the opportunity prove, to yourself and to others, that you can usefully contribute to real software projects.  You will meet and interact with other developers, some of whom work on FOSS projects for a living.  If you can help them solve their problems, they are inclined to help you solve yours -- with advice, contacts, recommendation letters, and maybe even job offers. </para>
        <para>One of the big differences between working in FOSS and working on proprietary software is that your work is visible to anyone who cares to look.  Every mailing list post you write, every blog entry you post, every bug you file, every wiki page you edit, and every line of code you write, are available for anyone's inspection. </para>
        <para>This a huge potential advantage, if you know how to use it.  In the coming chapters, as you begin to engage with your chosen FOSS project, we point out portfolio building opportunities. </para>
        <para>Really, though, the portfolio should be a side effect.  If you choose a project that matters to you, and if you work hard to help that project achieve its goals, then your portfolio builds itself.  </para>
        <section>
          <sectioninfo>
            <title>Exercise - Learn about a project's leaders </title>
          </sectioninfo><para> Revisit the project you blogged about in (XREF) Exercise 1.1, and spend some time figuring out who some of the project leaders are.  Read through the project wiki, mailing lists, and so on.  What can you find out about the project leaders?  What information do they make available about themselves?  Given what you've read, what do you think about their work? </para>
        </section>
      </section><section>
        <sectioninfo>
          <title>Exercise - Write your own FOSS bio </title>
        </sectioninfo><para>Find an online wiki provider -- <ulink url="http://www.wikispaces.com/"> Wikispaces</ulink>, for example -- and create a wiki page that will become your online FOSS portfolio.  Write a little bit about yourself.  Link to content: your resume, your blog, your Twitter account, or anything that might be relevant to potential employers.  You will use this portfolio extensively over the course of this book. </para>
      </section><section>
        <sectioninfo>
          <title>Supplemental Materials </title>
        </sectioninfo><para>
          <ulink url="http://www.catb.org/~esr/writings/homesteading/"> The Cathedral and The Bazaar</ulink> is a great story about the FOSS principles in action.  Written originally in 1998 by Eric S. Raymond, it's considered a must-read by many FOSS practitioners.</para>
      </section>
</chapter>
