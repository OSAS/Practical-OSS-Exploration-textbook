<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter>
  <article lang="en">
    <articleinfo>
      <title>Building_the_Code</title>
    </articleinfo><section>
      <sectioninfo>
        <title>Building_the_Code</title>
      </sectioninfo><para>By Greg DeKoenigsberg </para>
      <section>
        <sectioninfo>
          <title>From Source to Executable </title>
        </sectioninfo><para>Now you know how source control works, and you've got a gigantic pile of source code sitting in a directory.   </para>
        <para>What do you do with it? </para>
        <para>The process of turning source code into executable binary code can be extremely complicated.  The more source code you have, the more complicated that process is.  Almost every serious piece of software has its own build process, that every developer must follow -- and woe be unto the developer who repeatedly breaks the build for everyone else.   </para>
        <para>In this chapter, you learn about how software is built.  You learn about how the build process works in general, about some tools that you are likely to see, and you walk through a build for a FOSS project to see how it works in practice. </para>
      </section><section>
        <sectioninfo>
          <title>What is Building, Exactly? </title>
        </sectioninfo><para>There are many steps in the process of turning source code into a binary executable.  Some examples of tasks that you might encounter during a typical build process: </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis>Compiling the code.</emphasis>  Source code must somehow become machine code, ultimately.  Sometimes this is handled in real-time by an interpreter, as in the case of scripting languages such as Perl or Javascript.  For more complex applications, though, this work is usually handled by a compiler.  Therefore, you must ensure that you have a proper compiler installed, and that you are calling the compiler properly with the correct compiler options.</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <listitem>
            <para>
              <emphasis>Linking object files and libraries.</emphasis>  In the modern world, it's crazy to write all of the code yourself.  When you want to write output to the screen, you don't write code that talks directly to the monitor; you use a library that handles input and output.  When you want to play audio, you don't handcode the waveforms yourself; you use audio codecs.  When you compile the code, you almost always need to include libraries of one kind or another -- which means you must know which libraries you need, and you must ensure that the libraries are where the compiler expects them to be, and that the libraries are all of the right version.</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <listitem>
            <para>
              <emphasis>Determining build order and dependencies.</emphasis>  In complex software projects, it's vital to keep track of dependencies.  A change to code in a single library can have effects across your entire project, and might require some or all of your code to be recompiled -- and often in a particular order.  Keeping track of dozens of libraries, and references to those libraries by hundreds of source files, can be an ugly business.</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <listitem>
            <para>
              <emphasis>Testing the build results.</emphasis>  It's essential to know when you've introduced bugs sooner rather than later; new bugs are often easy to fix, and old bugs are often not so easy to fix.  Also, it frequently happens that bugs, once fixed, creep back into code.  Running basic tests on a project every time it's built can be a good way to ensure that bugs get fixed and stay fixed.</para>
          </listitem>
        </itemizedlist><itemizedlist>
          <listitem>
            <para>
              <emphasis>Packaging and/or Deploying.</emphasis>  Sometimes you want to install the program you just compiled so that it can be run from anyhere on the system, and other programs or users can find it.  Or sometimes you want to bundle it up into a format that allows anyone to take your executable and install it easily for themselves.  You don't want to do this for every build, but when you know that your build is good, one of the important final steps is to put the executable, and all documentation, in a central location.</para>
          </listitem>
        </itemizedlist><para>Performing all of these tasks by hand would be time-consuming and difficult.  <emphasis>Build automation tools</emphasis> allow the developer to handle all of these tasks automatically -- and thus, to manage projects with a much higher degree of complexity.</para>
      </section><section>
        <sectioninfo>
          <title>Living With Complexity </title>
        </sectioninfo><para>Fair warning: sometimes code doesn't compile.  Sometimes you follow all the instructions, and it still doesn't work.  What then? </para>
        <para>If this is your first experience dealing with a large codebase written by someone else, then welcome to the real world.  As you run your first build, you may have very little idea of what's actually going on.  Don't get discouraged.  Have patience; you'll soon begin to figure it all out. </para>
        <para>You are about to walk through a software build process.  The typical build command might return hundreds, or even thousands, of log entries, all of which scroll across the screen at lightning speed.  You may understand all, some, or none of those entries. </para>
        <para>That's okay.  Everyone starts somewhere. </para>
        <para>Here are some points to keep in mind.   </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis>Read instructions carefully.</emphasis> Almost every sizable FOSS project has a README or an INSTALL file that provides instructions for how to build and install the software.  Read those instructions, and do your best to follow them to the letter.  Understand that even the best instructions may leave out a step or two -- and these are opportunities to improve the project.</para>
          </listitem><listitem>
            <para>
              <emphasis>Don't expect to understand every word.</emphasis>  Very few developers understand every single word of every build log they encounter.  Learning to distinguish between the important messages and the spurious messages takes time.  Don't be intimidated.</para>
          </listitem><listitem>
            <para>
              <emphasis>Read logs carefully and thoughtfully.</emphasis>  When you see an error, read back and think about what it could mean.  Does the error say "couldn't find something"?  That probably means you didn't install a library dependency properly.  Was the error you found the only error in the log?  In a 1000-line build log, the error at the end could be the result of another error dozens, or hundreds, of lines earlier.  If your build doesn't end happily, don't panic.  Relax and work your way through the problem.</para>
          </listitem><listitem>
            <para>
              <emphasis>Google is your friend.</emphasis>  If you don't understand an error message, just Google it!  Googling an error message can be a surprisingly effective method for determining what's gone wrong.  There's a decent chance that someone before you has run into the same error, and someone has posted the solution to your problem on a message board or mailing list.  Even if the answer isn't obvious, there will frequently be clues.  The Internet is a gigantic resource.  Use it.</para>
          </listitem><listitem>
            <para>
              <emphasis>Ask for help.</emphasis>  If you've done your homework and still can't figure out why your program isn't building, get on the project's mailing list, message board, or IRC channel, and ask for help.  The more you've dug into the problem, and the more information you provide, the more likely it is that developers will help you figure out the problem.</para>
          </listitem>
        </itemizedlist><para>Now it's time to get on with it. </para>
      </section><section>
        <sectioninfo>
          <title>Building Freeciv: Watching GNU Autotools at Work </title>
        </sectioninfo><para>If you are working on a project that is written in C or C++, and that project is designed to run on Linux or UNIX, then it's incredibly likely that you will be seeing GNU Autotools at work. </para>
        <para>Developers use GNU Autotools to make sure that their users (that's you) can compile and run a piece of software across a wide variety of hardware and software configurations. </para>
        <para>You are now going to walk through the building of Freeciv.  You checked out a local working repository of Freeciv in the last chapter, right?  Now it's time to turn all that code into a playable binary executable of the latest and awesomest version of Freeciv.   </para>
        <para>
          <emphasis>NOTE:</emphasis> Follow along with the sample build process, below.  As you proceed through the build process, you may see many of the same errors; you may see completely different errors.  No matter what happens, keep calm and carry on.  Read the instructions.  Don't expect to understand every word.  Read logs carefully and thoughtfully.  Google is your friend.  Ask for help.  </para><section>
          <sectioninfo>
            <title>Finding the Installation Instructions </title>
          </sectioninfo><para>Look for an <programlisting format="linespecific">INSTALL</programlisting> file in the top-level directory of the local repository.  If you don't find an <programlisting format="linespecific">INSTALL</programlisting> file, look for a <programlisting format="linespecific">README</programlisting> file.  If you don't find a <programlisting format="linespecific">README</programlisting> file, look for a script called <programlisting format="linespecific">configure</programlisting> and run it.  And if you don't find that, send a nice email to the maintainers of the project, and ask them if they could use some help with their installation instructions. </para><para>Oh, look, there's an <programlisting format="linespecific">INSTALL</programlisting> file right there in the top level directory of the <programlisting format="linespecific">freeciv</programlisting> folder. </para><para>
            <emphasis>NOTE:</emphasis> the version of the <programlisting format="linespecific">INSTALL</programlisting> file referred to here is dated 22-Oct-2009.  If it's way out of date, then you'll just have to buy the next edition of the textbook.  Just kidding!  Send in a patch, and we'll fix it.</para>
        </section>
      </section><section>
        <sectioninfo>
          <title>Installing Prerequisites </title>
        </sectioninfo><para>Every good <programlisting format="linespecific">INSTALL</programlisting> file tells you what the prerequisites are.  If you find an <programlisting format="linespecific">INSTALL</programlisting> file that doesn't, offer to fix it. </para><para>Freeciv does, though.  Right there in the table of contents: </para>
        <programlisting>     0. Prerequisites:     1. Prerequisites for the clients:          1a. Prerequisites for the Gtk+ client:          1b. Prerequisites for the SDL client:          1c. Prerequisites for the Xaw client:</programlisting>
        <para>There are two sets of requirements.  One set of requirements is listed for general building with the following list: </para>
        <itemizedlist>
          <listitem>
            <para> Unix (or similar). </para>
          </listitem><listitem>
            <para> An ANSI C compiler </para>
          </listitem><listitem>
            <para> A "make" program </para>
          </listitem><listitem>
            <para> The programs from GNU gettext version 0.10.36 or better </para>
          </listitem><listitem>
            <para> GNU autoconf, version 2.58 or better </para>
          </listitem><listitem>
            <para> GNU automake, version 1.6 or better </para>
          </listitem>
        </itemizedlist><para>Then another set of requirements is required for building the Freeciv clients, which can actually be compiled in different flavors, and each flavor has a different set of dependencies.  You are just building the Gtk+ client, which means: </para>
        <itemizedlist>
          <listitem>
            <para> pkg-config </para>
          </listitem><listitem>
            <para> "Glib" greater or equal to 2.4.0 </para>
          </listitem><listitem>
            <para> The "Atk" accessibility library </para>
          </listitem><listitem>
            <para> The "Pango" text layout and rendering library </para>
          </listitem><listitem>
            <para> The "Gtk+" widget library greater or equal to 2.4.0 </para>
          </listitem>
        </itemizedlist><para>That's a lot of stuff.  How do you get all that stuff? </para>
        <para>This is where Linux distributions shine.  All modern Linux distributions have package management programs that allow for easy location and installation of FOSS software.  In this example case, presume the Fedora distribution, but Ubuntu uses similar commands and works in largely the same way. </para>
        <para>First, make sure that you have a C compiler.  In fact, use the compiler that Freeciv recommends in the INSTALL file: <programlisting format="linespecific">gcc</programlisting>. </para><programlisting>[gregdek@ip-10-242-118-147 freeciv]$ rpm -q gccpackage gcc is not installed</programlisting>
        <para>Hm!  You have your first problem.   </para>
        <para>
          <emphasis>RPM</emphasis> is a program that maintains a list of software packages installed on the system.  With this command, you asked, "tell me if you have gcc installed".  And RPM said "nope, sorry."  Which means you turn to RPM's big brother, <programlisting format="linespecific">yum</programlisting>.  (In the Ubuntu/Debian world, these commands would be <programlisting format="linespecific">dpkg</programlisting> and <programlisting format="linespecific">apt-get</programlisting>, respectively.)</para><para>Next you ask <programlisting format="linespecific">yum</programlisting> to install <programlisting format="linespecific">gcc</programlisting>: </para><programlisting>[gregdek@ip-10-242-118-147 freeciv]$ yum install gccLoaded plugins: fastestmirrorYou need to be root to perform this command.</programlisting>
        <para>Oh, right.  If you're going to work with Linux, you need to know when you need to be regular user, and when you need to be root.  When you're adding new software to the system, to be accessed by other programs and potentially other users, you need to be root.  (You can also use the <programlisting format="linespecific">su -c</programlisting> command, which allows you to masquerade as root.) </para><programlisting>[root@ip-10-242-118-147 ~]# yum install gccLoaded plugins: fastestmirrorDetermining fastest mirrors * updates-newkey: kdeforge.unl.edu * fedora: kdeforge.unl.edu * updates: kdeforge.unl.eduupdates-newkey                                           | 2.3 kB     00:00     fedora                                                   | 2.1 kB     00:00     updates                                                  | 2.6 kB     00:00     Setting up Install ProcessParsing package install argumentsResolving Dependencies--&gt; Running transaction check---&gt; Package gcc.i386 0:4.1.2-33 set to be updated--&gt; Processing Dependency: glibc-devel &gt;= 2.2.90-12 for package: gcc--&gt; Running transaction check---&gt; Package glibc-devel.i386 0:2.7-2 set to be updated--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================ Package               Arch           Version            Repository        Size================================================================================Installing: gcc                   i386           4.1.2-33           fedora           5.2 MInstalling for dependencies: glibc-devel           i386           2.7-2              fedora           2.0 MTransaction Summary================================================================================Install      2 Package(s)         Update       0 Package(s)         Remove       0 Package(s)         Total download size: 7.2 MIs this ok [y/N]:</programlisting>
        <para>Lots of interesting information here!  And you already start to see how software fits together.  The programs <programlisting format="linespecific">yum</programlisting> and <programlisting format="linespecific">rpm</programlisting> work together to make sure that when you choose to install <programlisting format="linespecific">gcc</programlisting>, you also get everything that <programlisting format="linespecific">gcc</programlisting> needs to be useful -- in this case, the header and object files necessary for developing programs that use the standard C libraries.  You asked for one software package, but now you get two. </para><para>Answer yes: </para>
        <programlisting>Is this ok [y/N]: yDownloading Packages:(1/2): glibc-devel-2.7-2.i386.rpm                        | 2.0 MB     00:00     (2/2): gcc-4.1.2-33.i386.rpm                             | 5.2 MB     00:00     --------------------------------------------------------------------------------Total                                           6.4 MB/s | 7.2 MB     00:01     ============================== Entering rpm code ===============================Running rpm_check_debugRunning Transaction TestFinished Transaction TestTransaction Test SucceededRunning Transaction  Installing     : glibc-devel                                              1/2   Installing     : gcc                                                      2/2 =============================== Leaving rpm code ===============================Installed:  gcc.i386 0:4.1.2-33                                                           Dependency Installed:  glibc-devel.i386 0:2.7-2                                                      Complete!</programlisting>
        <para>All right, that's one dependency down.  Which also means that you can build anything that needs GCC in the future, so that's useful. </para>
        <para>Now you need a <programlisting format="linespecific">make</programlisting> program.  They recommend <programlisting format="linespecific">gmake</programlisting>, so see if it's installed. </para><programlisting>[root@ip-10-242-118-147 ~]# rpm -q gmakepackage gmake is not installed</programlisting>
        <para>All right, install it. </para>
        <programlisting>[root@ip-10-242-118-147 ~]# yum install gmakeLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * updates-newkey: kdeforge.unl.edu * fedora: kdeforge.unl.edu * updates: kdeforge.unl.eduSetting up Install ProcessParsing package install argumentsNo package gmake available.Nothing to do</programlisting>
        <para>Wait, what's this?  It appears that gmake isn't installed, and isn't available?  What's going on?   </para>
        <para>Well, upon reading the INSTALL instructions more closely, there is this nugget: </para>
        <programlisting>   You can check if you have GNU make installed on your system by   typing:    % make -v                   [and if this doesn't work, try "gmake -v"]   The output should include "GNU Make" somewhere.</programlisting>
        <para>Get in the habit of reading instructions. </para>
        <programlisting>[root@ip-10-242-118-147 ~]# make -vGNU Make 3.81Copyright (C) 2006  Free Software Foundation, Inc.This is free software; see the source for copying conditions.There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR APARTICULAR PURPOSE.This program built for i386-redhat-linux-gnu</programlisting>
        <para>All right, you've got make.  How about GNU <programlisting format="linespecific">gettext</programlisting>? </para><programlisting>[root@ip-10-242-118-147 ~]# rpm -q gettextgettext-0.16.1-12.fc8</programlisting>
        <para>Very good.  <emphasis>Autoconf</emphasis>?</para><programlisting>[root@ip-10-242-118-147 ~]# rpm -q autoconfpackage autoconf is not installed[root@ip-10-242-118-147 ~]# yum install -y autoconf(snip lots of yum output)Installed:  autoconf.noarch 0:2.61-9.fc8                                                  Dependency Installed:  imake.i386 0:1.0.2-5.fc8Complete!                                                 </programlisting>
        <para>All set.  Automake? </para>
        <programlisting>[root@ip-10-242-118-147 ~]# yum install -y automake(snip lots of yum output)Installed:  automake.noarch 0:1.10-6                                                      Complete!</programlisting>
        <para>Note that this time you didn't even bother to see if the RPM was installed first; you just installed it, because if <programlisting format="linespecific">automake</programlisting> had already been installed, <programlisting format="linespecific">yum</programlisting> would have let us know: </para><programlisting>[root@ip-10-242-118-147 ~]# yum install -y automakeLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * updates-newkey: kdeforge.unl.edu * fedora: kdeforge.unl.edu * updates: kdeforge.unl.eduSetting up Install ProcessParsing package install argumentsPackage automake-1.10-6.noarch already installed and latest versionNothing to do</programlisting>
        <para>That's half of the prerequisites.  Time for the other half. </para>
        <programlisting>[root@ip-10-242-118-147 ~]# yum install pkg-config(snip)No package pkg-config available.Nothing to do[root@ip-10-242-118-147 ~]# yum install pkgconfig(snip)Package 1:pkgconfig-0.22-4.fc8.i386 already installed and latest versionNothing to do</programlisting>
        <para>Okay, so you've got pkg-config installed, even though they seem to be calling it <programlisting format="linespecific">pkgconfig</programlisting> for some reason, which was discovered through a lucky guess -- noting that in the INSTALL file, even though they call it <programlisting format="linespecific">pkg-config</programlisting>, the file in question is called <programlisting format="linespecific">pkgconfig-0.14.0.tar.gz</programlisting>.  These kinds of little inconsistencies are maddening, and you will find them everywhere in your software life, so get used to them. </para><para>Now for <programlisting format="linespecific">Glib</programlisting>: </para><programlisting>[root@ip-10-242-118-147 ~]# yum install Glib(snip)No package Glib available.  * Maybe you meant: glibNothing to do</programlisting>
        <para>Oh, maybe you did mean <programlisting format="linespecific">glib</programlisting>.  Thanks! </para><programlisting>[root@ip-10-242-118-147 ~]# yum install glib(snip)Installed:  glib.i386 1:1.2.10-28.fc8  Complete!</programlisting>
        <para>This is kind of slow, isn't it?  Can you specify multiple packages to be installed at once?  Indeed you can. </para>
        <programlisting>[root@ip-10-242-118-147 ~]# yum install atk pango gtk+(snip)Package atk-1.20.0-1.fc8.i386 already installed and latest version(snip)Installed:  gtk+.i386 1:1.2.10-59.fc8              pango.i386 0:1.18.4-1.fc8             Dependency Installed:  cairo.i386 0:1.4.14-1.fc8                   libX11.i386 0:1.1.3-4.fc8           libXext.i386 0:1.0.1-4.fc8                  libXft.i386 0:2.1.12-3.fc8          libXi.i386 0:1.1.3-1.fc8                    libXrender.i386 0:0.9.4-1.fc8       xorg-x11-filesystem.noarch 0:7.1-2.fc6     Complete!</programlisting>
        <para>Whew.  At long last, you're done. </para>
        <para>Or so it would appear -- but appearances can be deceiving. </para>
      </section><section>
        <sectioninfo>
          <title>configure </title>
        </sectioninfo><para>Once you have all of the prerequisites installed, the next step is to run the <programlisting format="linespecific">configure</programlisting> script. </para><para>The <programlisting format="linespecific">configure</programlisting> script, in this case, is generated by the <emphasis>GNU Autotools</emphasis>, a set of tools that examine lots and lots (and lots and lots) of variables about your system.  It checks your compiler, it checks your hardware, it checks all kinds of stuff, and as a result of all of these checks (literally hundreds), it builds a <programlisting format="linespecific">makefile</programlisting> that the compiler uses to build the binary executable.</para><para>Simple, right?  Give it a try.  But first, read the instructions: </para>
        <programlisting>2. Generating Makefiles=======================This section contains two parts, one for generating makefiles from svnversions and one for generating makefiles from release versions.2a. Generating the Makefile for svn versions:=============================================This step is only needed for svn versions.To create the makefile just type % ./autogen.shThis will create the configure script and will run it. All parametersof autogen.sh are passed to configure. Read the next section about theparameters which can be passed to configure.</programlisting>
        <para>All right, seems simple enough.  Run it and see what happens: </para>
        <programlisting>[gregdek@ip-10-242-118-147 freeciv]$ ./autogen.sh + checking for autoconf &gt;= 2.58 ... found 2.61, ok.+ checking for autoheader &gt;= 2.58 ... found 2.61, ok.+ checking for automake &gt;= 1.6 ... found 1.10, ok.+ checking for aclocal &gt;= 1.6 ... found 1.10, ok.+ checking for libtoolize &gt;= 1.4.3 ... You must have libtoolize installed to compile freeciv.Download the appropriate package for your distribution,or get the source tarball at ftp://ftp.gnu.org/pub/gnu/libtool/+ checking for xgettext &gt;= 0.10.36 ... found 0.16.1, ok.+ checking for msgfmt &gt;= 0.10.36 ... found 0.16.1, ok.</programlisting>
        <para>Oops.  Looks like the script found a missing dependency that's not documented!  Fortunately, <emphasis>GNU Autotools</emphasis> found it.  Install <programlisting format="linespecific">libtoolize</programlisting> -- or <programlisting format="linespecific">libtool</programlisting>, which is it?  Anyway, it's probably one of them:</para><programlisting>[root@ip-10-242-118-147 FREECIV]# yum install libtoolize(snip)No package libtoolize available.Nothing to do[root@ip-10-242-118-147 FREECIV]# yum install libtool(snip)Installed:  libtool.i386 0:1.5.24-3.fc8                                                   Complete!</programlisting>
        <para>All right, try that again. </para>
        <programlisting>[gregdek@ip-10-242-118-147 freeciv]$ ./autogen.sh + checking for autoconf &gt;= 2.58 ... found 2.61, ok.+ checking for autoheader &gt;= 2.58 ... found 2.61, ok.+ checking for automake &gt;= 1.6 ... found 1.10, ok.+ checking for aclocal &gt;= 1.6 ... found 1.10, ok.+ checking for libtoolize &gt;= 1.4.3 ... found 1.5.24, ok.+ checking for xgettext &gt;= 0.10.36 ... found 0.16.1, ok.+ checking for msgfmt &gt;= 0.10.36 ... found 0.16.1, ok.+ running aclocal ...+ running autoheader ... + running autoconf ... + running libtoolize ... Putting files in AC_CONFIG_AUX_DIR, `bootstrap'.+ running automake ... configure.ac:63: installing `bootstrap/missing'configure.ac:63: installing `bootstrap/install-sh'ai/Makefile.am: installing `bootstrap/depcomp'common/Makefile.am:97: `%'-style pattern rules are a GNU make extensionutility/Makefile.am:60: `%'-style pattern rules are a GNU make extension+ removing config.cache ... + running configure ... I am going to run ./configure with no arguments - if you wish to pass any to it, please specify them on the ./autogen.sh command line.</programlisting>
        <para>OK, so far so good!  It's successfully created a configure script, and now it's running that script.  Fingers crossed... </para>
        <programlisting>checking build system type... i686-pc-linux-gnuchecking host system type... i686-pc-linux-gnuchecking for a BSD-compatible install... /usr/bin/install -cchecking whether build environment is sane... yeschecking for a thread-safe mkdir -p... /bin/mkdir -pchecking for gawk... gawkchecking whether make sets $(MAKE)... yeschecking for style of include used by make... GNUchecking for gcc... gccchecking for C compiler default output file name... a.outchecking whether the C compiler works... yeschecking whether we are cross compiling... nochecking for suffix of executables... checking for suffix of object files... ochecking whether we are using the GNU C compiler... yeschecking whether gcc accepts -g... yeschecking for gcc option to accept ISO C89... none neededchecking dependency style of gcc... gcc3checking how to run the C preprocessor... gcc -Echecking for grep that handles long lines and -e... /bin/grepchecking for egrep... /bin/grep -Echecking for ANSI C header files... yeschecking for sys/types.h... yeschecking for sys/stat.h... yeschecking for stdlib.h... yeschecking for string.h... yeschecking for memory.h... yeschecking for strings.h... yeschecking for inttypes.h... yeschecking for stdint.h... yeschecking for unistd.h... yeschecking for gethostbyname2... yeschecking for inet_pton... yeschecking for inet_ntop... yeschecking for getnameinfo... yeschecking for AF_INET6... yeschecking for a sed that does not truncate output... /bin/sedchecking for gawk... (cached) gawkchecking for gcc... (cached) gccchecking whether we are using the GNU C compiler... (cached) yeschecking whether gcc accepts -g... (cached) yeschecking for gcc option to accept ISO C89... (cached) none neededchecking dependency style of gcc... (cached) gcc3checking how to run the C preprocessor... gcc -Echecking for g++... nochecking for c++... nochecking for gpp... nochecking for aCC... nochecking for CC... nochecking for cxx... nochecking for cc++... nochecking for cl.exe... nochecking for FCC... nochecking for KCC... nochecking for RCC... nochecking for xlC_r... nochecking for xlC... nochecking whether we are using the GNU C++ compiler... nochecking whether g++ accepts -g... nochecking dependency style of g++... nonechecking whether the C++ compiler works... noconfigure: error: no acceptable C++ compiler found in $PATHSee `config.log' for more details.</programlisting>
        <para>Wait... what?  But... but... it's written in C!  Why do you need a C++ compiler for C? </para>
        <para>Annoyed, Google "freeciv c++", looking for clues.  (Remember: Google is your friend.)  And on the first page of search results, there is this gem of wisdom: </para>
        <para>"Freeciv is a free turn-based multiplayer strategy game, in which each player becomes the leader ... Mostly written in C."  </para>
        <para>
          <emphasis>Mostly</emphasis> written in C.  Following a few links, discover that at least part of it is written in C++.  Sigh.  So, install the <emphasis>GNU C++</emphasis> compiler -- Googling "gnu c++ fedora" tells us that the package name is likely called <programlisting format="linespecific">gcc-c++</programlisting>.</para><programlisting>[root@ip-10-242-118-147 ~]# yum install gcc-c++(snip)Installed:  gcc-c++.i386 0:4.1.2-33                                                       Dependency Installed:  libstdc++-devel.i386 0:4.1.2-33                                               Complete!</programlisting>
        <para>Try all that again. </para>
        <programlisting>[gregdek@ip-10-242-118-147 freeciv]$ ./autogen.sh+ checking for autoconf &gt;= 2.58 ... found 2.61, ok.+ checking for autoheader &gt;= 2.58 ... found 2.61, ok.+ checking for automake &gt;= 1.6 ... found 1.10, ok.(snip to where we broke the last time...)checking for g++... g++checking whether we are using the GNU C++ compiler... yes(snip to where we fail again...)checking for gzgets in -lz... noconfigure: error: Could not find zlib library.configure failed</programlisting>
        <para>Another undocumented dependency. </para>
        <para>So take stock at this point of where you are. </para>
        <para>Freeciv is a good program.  It runs on many platforms.  There are dozens of active developers working on pieces of the codebase at any given time.  And yet, in the space of 15 minutes, you have already found a handful of places where the documentation could be improved -- and you haven't even made it to a first successful build! </para>
        <para>This is what complex software is like.  Getting it 100% right is incredibly hard, and there are always little places to improve. </para>
        <para>Anyway, back to business.  Missing <programlisting format="linespecific">zlib</programlisting>?  Install <programlisting format="linespecific">zlib</programlisting>. </para><programlisting>[root@ip-10-242-118-147 ~]# yum install zlib(snip)Package zlib-1.2.3-14.fc8.i386 already installed and latest versionNothing to do</programlisting>
        <para>That's odd.  But Google is your friend, and Googling "freeciv zlib" leads to this exact problem -- and it's a common problem.  You need development libraries for <programlisting format="linespecific">zlib</programlisting>. </para><para>Many FOSS projects split their libraries in two.  They provide runtime libraries, and they provide development libraries.  In fact, if you read the INSTALL document all the way down to section 10: </para>
        <programlisting>To compile freeciv on a debian system you need the following packages: Common requirements:   gcc   libc6-dev   libreadline4-dev   zlib1g-dev   xlib6g-dev</programlisting>
        <para>Well, this isn't a Debian system, it's a Fedora system -- but the principle is the same.  You need development libraries.  Googling "fedora zlib" returns, in the top link, a reference to <programlisting format="linespecific">zlib-devel</programlisting>.  So try that: </para><programlisting>[root@ip-10-242-118-147 ~]# yum install zlib-devel(snip)Installed:  zlib-devel.i386 0:1.2.3-14.fc8                                                Complete!</programlisting>
        <para>Try, try again. </para>
        <programlisting>[gregdek@ip-10-242-118-147 freeciv]$ ./autogen.sh (snip to the next error...)configure: error: could not guess which client to compileconfigure failed</programlisting>
        <para>It clearly says in the <programlisting format="linespecific">INSTALL</programlisting> file (you did read the <programlisting format="linespecific">INSTALL</programlisting> file very closely, didn't you?) that "Gtk+" is the default client.  So what guess is required? </para><para>Going back a little farther up in the log, though, you see the problem: </para>
        <programlisting>configure: checking for which client to compile:...checking for pkg-config... /usr/bin/pkg-configchecking for GTK+ - version &gt;= 2.4.0... no*** Could not run GTK+ test program, checking why...*** The test program failed to compile or link. See the file config.log for the*** exact error that occured. This usually means GTK+ is incorrectly installed.checking for sdl-config... nochecking for SDL - version &gt;= 1.1.4... no*** The sdl-config script installed by SDL could not be found*** If SDL was installed in PREFIX, make sure PREFIX/bin is in*** your path, or set the SDL_CONFIG environment variable to the*** full path to sdl-config.checking for X... nochecking whether Xfuncproto was supplied... no, found:  FUNCPROTO=15 NARROWPROTOchecking for Xfuncproto control definition FUNCPROTO... yes: 15checking for Xfuncproto control definition NARROWPROTO... yes: 1checking pkg-config is at least version 0.9.0... yeschecking for PNG... nochecking for png_read_image in -lpng12... nochecking for png_read_image in -lpng... nochecking png.h usability... nochecking png.h presence... nochecking for png.h... nochecking extra paths for Xpm... library no, include nochecking for XOpenDisplay in X library -lX11... nochecking will compile gui-ftwl... nochecking will compile gui-beos... noconfigure: error: could not guess which client to compileconfigure failed</programlisting>
        <para>It seems to want a GTK+ version of greater than 2.4.0.  Isn't that what you installed? </para>
        <programlisting>[gregdek@ip-10-242-118-147 freeciv]$ rpm -q gtk+gtk+-1.2.10-59.fc8</programlisting>
        <para>Hm!  Stuck?  Once again, Google is your friend.  Google for "Fedora gtk+" and the very first link is to a discussion on a mailing list, where someone asks, "is there a gtk+2?"  And a helpful Fedora community member says, "yes, but it's called gtk2". </para>
        <para>So try that. </para>
        <programlisting>[root@ip-10-242-118-147 ~]# yum install gtk2(snip)Installed:  gtk2.i386 0:2.12.8-2.fc8                                                      Dependency Installed:  cups-libs.i386 1:1.3.9-2.fc8          libXcomposite.i386 0:0.4.0-3.fc8         libXcursor.i386 0:1.1.9-1.fc8         libXfixes.i386 0:4.0.3-2.fc8             libXinerama.i386 0:1.0.2-3.fc8        libXrandr.i386 0:1.2.2-1.fc8           Complete!</programlisting>
        <para>OK, that's a lot of extra stuff, but if <programlisting format="linespecific">gtk2</programlisting> needs it, then <programlisting format="linespecific">gtk2</programlisting> needs it. </para><para>Try, try again. </para>
        <programlisting>(snip)checking for GTK+ - version &gt;= 2.4.0... no*** Could not run GTK+ test program, checking why...*** The test program failed to compile or link. See the file config.log for the*** exact error that occured. This usually means GTK+ is incorrectly installed.(snip)configure: error: could not guess which client to compileconfigure failed</programlisting>
        <para>Same exact error.  Maybe there's a <programlisting format="linespecific">gtk2-devel</programlisting>? </para><programlisting>[root@ip-10-242-118-147 ~]# yum install gtk2-devel(snip)Installed:  gtk2-devel.i386 0:2.12.8-2.fc8                                                Dependency Installed:  atk-devel.i386 0:1.20.0-1.fc8                                                   cairo-devel.i386 0:1.4.14-1.fc8                                                 docbook-dtds.noarch 0:1.0-33.fc8                                                docbook-style-dsssl.noarch 0:1.79-4.1                                           docbook-style-xsl.noarch 0:1.73.2-5.fc8                                         docbook-utils.noarch 0:0.6.14-11.fc8                                            fontconfig-devel.i386 0:2.4.2-5.fc8                                             freetype-devel.i386 0:2.3.5-5.fc8                                               gc.i386 0:7.0-6.fc8                                                             glib2-devel.i386 0:2.14.6-2.fc8                                                 gtk-doc.noarch 0:1.9-4.fc8                                                      libX11-devel.i386 0:1.1.3-4.fc8                                                 libXau-devel.i386 0:1.0.3-3.fc8                                                 libXcursor-devel.i386 0:1.1.9-1.fc8                                             libXdamage.i386 0:1.1.1-3.fc8                                                   libXdmcp-devel.i386 0:1.0.2-4.fc8                                               libXext-devel.i386 0:1.0.1-4.fc8                                                libXfixes-devel.i386 0:4.0.3-2.fc8                                              libXft-devel.i386 0:2.1.12-3.fc8                                                libXi-devel.i386 0:1.1.3-1.fc8                                                  libXinerama-devel.i386 0:1.0.2-3.fc8                                            libXrandr-devel.i386 0:1.2.2-1.fc8                                              libXrender-devel.i386 0:0.9.4-1.fc8                                             libXxf86vm.i386 0:1.0.1-4.fc8                                                   libpng-devel.i386 2:1.2.33-1.fc8                                                libxcb-devel.i386 0:1.1-1.1.fc8                                                 mesa-libGL.i386 0:7.0.2-3.fc8                                                   mesa-libGL-devel.i386 0:7.0.2-3.fc8                                             openjade.i386 0:1.3.2-30.fc8                                                    opensp.i386 0:1.5.2-6.fc8                                                       pango-devel.i386 0:1.18.4-1.fc8                                                 perl-SGMLSpm.noarch 0:1.03ii-16.2.1                                             rarian.i386 0:0.6.0-4.fc8                                                       rarian-compat.i386 0:0.6.0-4.fc8                                                sgml-common.noarch 0:0.6.3-21.fc8                                               w3m.i386 0:0.5.2-5.fc8                                                          xml-common.noarch 0:0.6.3-21.fc8                                                xorg-x11-proto-devel.noarch 0:7.3-3.fc8                                       Complete!</programlisting>
        <para>There is, indeed -- and it brings in a ton of dependencies!  Including <programlisting format="linespecific">-devel</programlisting> versions of other dependencies you thought you'd satisfied, such as <programlisting format="linespecific">atk-devel</programlisting> and <programlisting format="linespecific">cairo-devel</programlisting>. </para><para>Imagine if you had to sort through all of these dependencies yourself, by hand.  With all of the effort you've already gone through to identify and satisfy a relatively small number of dependencies, imagine the work that would be required.  As imperfect as this process clearly is, it could be orders of magnitude worse. </para>
        <para>Try, try again.   </para>
        <programlisting>****************** Configuration Summary ******************  Build freeciv client: yes    Debugging support:  some  Client frontends:    Gtk-2.0: yes    SDL:     no    Xaw:     no    Win32:   no    FTWL:    no    Stub:    no  Build freeciv server:    yes    Debugging support:     some    Auth database support: noNow type 'make' to compile freeciv.</programlisting>
        <para>
          <emphasis>Blink.</emphasis>
        </para><para>It worked!  It worked it worked it worked it worked! </para>
        <para>You are, at long last, ready to <programlisting format="linespecific">make</programlisting>. </para>
      </section><section>
        <sectioninfo>
          <title>make </title>
        </sectioninfo><para>Look, once again, at the excellent instructions: </para>
        <programlisting>If all has gone well previous to this point, then compiling Freecivshould be as easy as typing "make" (or preferably, "gmake").If you have problems, read the file BUGS, and follow the advice carefully.  If the problem is with "gettext", please read the NativeLanguage Support section, below, for possible work-arounds.After compilation, the important results are:  - The "client/freeciv-&lt;GUI&gt;" and "server/freeciv-server" binaries.  - The "data/" directory, which contains the graphics and scenarios.  - The "po/" directory, which contains the localization files.  - The "civ" and "ser" scripts.It's perfectly feasible to play Freeciv in this directory, withoutinstalling it.  If you do this, the "civ" and "ser" scripts may beuseful, although they are not as necessary as they used to be.See the README file for more information.</programlisting>
        <para>Do as it says.  In fact, try a new trick: </para>
        <programlisting>[gregdek@ip-10-242-118-147 freeciv]$ make 1&gt;/tmp/freeciv-make.out 2&gt;/tmp/freeciv-make.err &amp;[1] 1517[gregdek@ip-10-242-118-147 freeciv]$</programlisting>
        <para>Compiling an entire software project can take quite a while, and generates a prodigious amount of data -- and watching a bazillion lines of code fly by is only fun for the first few seconds.  So this old-school UNIX command lets you capture all that output to look at it later.  The <programlisting format="linespecific">make</programlisting> command is the <emphasis>make</emphasis> command, of course.  The <programlisting format="linespecific">1&gt;/tmp/freeciv-make.out</programlisting> option tells the job to put the standard output into <programlisting format="linespecific">/tmp/freeciv-make.out</programlisting>, and <programlisting format="linespecific">2&gt;/tmp/freeciv-make.err</programlisting> tells the job to put error messages into <programlisting format="linespecific">/tmp/freeciv-make.err</programlisting>, and <programlisting format="linespecific">&amp;</programlisting> tells the job to run in the background, so that you can be free to do other things.  When the job completes, it tells you so.</para><para>As a truly ridiculous amount of computation takes place, wander off for a cup of coffee, and take this time to engage in <ulink url="http://xkcd.com/303/"> serious business</ulink>.  When you come back, hit enter, and see on the screen: </para><programlisting>[1]+  Done                    make &gt; /tmp/freeciv-make.out 2&gt; /tmp/freeciv-make.err</programlisting>
        <para>Ah, very good.  Now have a look at the log files.  How long are they?  Here's the clever <programlisting format="linespecific">wc</programlisting> (word count) command, with the <programlisting format="linespecific">-l</programlisting> parameter to show the number of lines instead of number of words: </para><programlisting>[gregdek@ip-10-242-118-147 freeciv]$ wc -l /tmp/freeciv-make.out1148 /tmp/freeciv-make.out[gregdek@ip-10-242-118-147 freeciv]$ wc -l /tmp/freeciv-make.err551 /tmp/freeciv-make.err[gregdek@ip-10-242-118-147 freeciv]$</programlisting>
        <para>Whoa!  551 errors?  Take a look at that. </para>
        <programlisting>[gregdek@ip-10-242-118-147 freeciv]$ less /tmp/freeciv-make.err </programlisting>
        <para>The <programlisting format="linespecific">less</programlisting> command is a tool that allows you to scroll through a text file, search the file for text, and so on.  The command <programlisting format="linespecific">man less</programlisting> gives you the manual page for the <programlisting format="linespecific">less</programlisting> command.  For now, the page-up and page-down keys can take you through the file.  Here are some sample lines from that error file: </para><programlisting>packets_gen.c: In function 'receive_packet_spaceship_info_100':packets_gen.c:23371: warning: dereferencing type-punned pointer will break strict-aliasing rulespackets_gen.c: In function 'send_packet_spaceship_info_100':packets_gen.c:23560: warning: dereferencing type-punned pointer will break strict-aliasing rulespackets_gen.c: In function 'receive_packet_ruleset_unit_100':packets_gen.c:23830: warning: dereferencing type-punned pointer will break strict-aliasing rulespackets_gen.c: In function 'send_packet_ruleset_unit_100':packets_gen.c:24178: warning: dereferencing type-punned pointer will break strict-aliasing rulespackets_gen.c: In function 'receive_packet_ruleset_game_100':packets_gen.c:24743: warning: dereferencing type-punned pointer will break strict-aliasing rulespackets_gen.c: In function 'send_packet_ruleset_game_100':packets_gen.c:24824: warning: dereferencing type-punned pointer will break strict-aliasing rules</programlisting>
        <para>Hmm, lots and lots of warnings.  In fact, paging up and down through the whole file quickly reveals that the error file is full of nothing but warnings.  Not ideal, and maybe something that someone should fix (patches welcome), but generally, warnings don't prevent a program from compiling. </para>
        <para>Next look at the regular output of the make.  Actually, use the <programlisting format="linespecific">tail</programlisting> command, which just shows the end of the file (the last 10 lines by default): </para><programlisting>[gregdek@ip-10-242-118-147 freeciv]$ tail /tmp/freeciv-make.out gcc -DHAVE_CONFIG_H -I. -I..  -I../server -I../utility -I../common -I../ai -I../common/aicore -I../server/generator -I../client -I../client/include -DLOCALEDIR="\"/usr/local/share/locale\"" -DDEFAULT_DATA_PATH="\".:data:~/.freeciv/2.3:/usr/local/share/freeciv\"" -DDEFAULT_SAVES_PATH="\"\"" -DDEFAULT_SCENARIO_PATH="\".:data/scenario:~/.freeciv/scenarios:/usr/local/share/freeciv/scenario\""  -Wall -Wpointer-arith -Wcast-align -Wmissing-prototypes -Wmissing-declarations -g -O2 -MT civmanual.o -MD -MP -MF .deps/civmanual.Tpo -c -o civmanual.o civmanual.cmv -f .deps/civmanual.Tpo .deps/civmanual.Po/bin/sh ../libtool --preserve-dup-deps --tag=CC   --mode=link gcc  -Wall -Wpointer-arith -Wcast-align -Wmissing-prototypes -Wmissing-declarations -g -O2   -o civmanual civmanual.o ../server/libfreeciv-srv.la ../client/helpdata.lo ../server/scripting/libscripting.la ../dependencies/lua-5.1/src/liblua.a ../dependencies/toluaxx/src/lib/libtolua.a ../server/generator/libgenerator.la ../common/libfreeciv.la  -lm   -lz  mkdir .libsgcc -Wall -Wpointer-arith -Wcast-align -Wmissing-prototypes -Wmissing-declarations -g -O2 -o civmanual civmanual.o ../client/helpdata.o  ../server/.libs/libfreeciv-srv.a ../server/scripting/.libs/libscripting.a ../dependencies/lua-5.1/src/liblua.a ../dependencies/toluaxx/src/lib/libtolua.a ../server/generator/.libs/libgenerator.a ../common/.libs/libfreeciv.a -lm -lz  make[2]: Leaving directory `/home/gregdek/FREECIV/freeciv/manual'make[2]: Entering directory `/home/gregdek/FREECIV/freeciv'make[2]: Nothing to be done for `all-am'.make[2]: Leaving directory `/home/gregdek/FREECIV/freeciv'make[1]: Leaving directory `/home/gregdek/FREECIV/freeciv'[gregdek@ip-10-242-118-147 freeciv]$ </programlisting>
        <para>That's what <programlisting format="linespecific">make</programlisting> looks like when it succeeds.  Be sure that you successfully generated the important bits, as you recall from the <programlisting format="linespecific">INSTALL</programlisting> guide: </para><programlisting>After compilation, the important results are:  - The "client/freeciv-&lt;GUI&gt;" and "server/freeciv-server" binaries.  - The "data/" directory, which contains the graphics and scenarios.  - The "po/" directory, which contains the localization files.  - The "civ" and "ser" scripts.</programlisting>
        <para>See if you find these by using the <programlisting format="linespecific">ls</programlisting> command. </para><programlisting>[gregdek@ip-10-242-118-147 freeciv]$ ls client/freeciv-*client/freeciv-gtk2[gregdek@ip-10-242-118-147 freeciv]$ ls server/freeciv-serverserver/freeciv-server[gregdek@ip-10-242-118-147 freeciv]$ ls data/Freeciv          civclient.dsc        freeciv-server.icns  isotridentFreeciv.in       civclient.dsc.in     freeciv-server.png   isotrident.tilespecMakefile         civserver.dsc        freeciv.rc           miscMakefile.am      civserver.dsc.in     freeciv.rc-2.0       nationMakefile.in      civserver.room       graphics             scenarioamplio           civserver.room.in    gtk_menus.xml        stdsoundsamplio.tilespec  default              helpdata.txt         stdsounds.soundspecbuildings        default.serv         hex2t                themesciv1             flags                hex2t.tilespec       tridentciv1.serv        fonts                icons                trident.tilespecciv2             freeciv-client.icns  isophex              wondersciv2.serv        freeciv-client.png   isophex.tilespec[gregdek@ip-10-242-118-147 freeciv]$ ls po/ChangeLog       cs.gmo     es.gmo     he.po   nb.po      ro.poMakefile        cs.po      es.po      hu.gmo  nl.gmo     ru.gmoMakefile.in     da.gmo     et.gmo     hu.po   nl.po      ru.poMakefile.in.in  da.po      et.po      it.gmo  no.gmo     statistics.rbPOTFILES        de.gmo     et.po.sig  it.po   no.po      sv.gmoPOTFILES.in     de.po      fa.gmo     ja.gmo  pl.gmo     sv.poPOTFILES.skip   el.gmo     fa.po      ja.po   pl.po      tr.gmoar.gmo          el.po      fi.gmo     ko.gmo  pt.gmo     tr.poar.po           en_GB.gmo  fi.po      ko.po   pt.po      uk.gmoca.gmo          en_GB.po   fr.gmo     lt.gmo  pt_BR.gmo  uk.poca.po           eo.gmo     fr.po      lt.po   pt_BR.po   zh_CN.gmocheck_po.pl     eo.po      he.gmo     nb.gmo  ro.gmo     zh_CN.po[gregdek@ip-10-242-118-147 freeciv]$ ls civciv[gregdek@ip-10-242-118-147 freeciv]$ ls serser[gregdek@ip-10-242-118-147 freeciv]$ </programlisting>
        <para>That certainly looks like everything was generated -- but the proof is in the pudding.  Does the code run?  Run the <programlisting format="linespecific">ser</programlisting> script, which starts the <programlisting format="linespecific">freeciv</programlisting> server, just to make sure: </para><programlisting>[gregdek@ip-10-242-118-147 freeciv]$ ./serThis is the server for Freeciv version 2.2.99-devYou can learn a lot about Freeciv at http://www.freeciv.org/2: Loading rulesets2: AI*1 has been added as Easy level AI-controlled player.2: AI*2 has been added as Easy level AI-controlled player.2: AI*3 has been added as Easy level AI-controlled player.2: AI*4 has been added as Easy level AI-controlled player.2: AI*5 has been added as Easy level AI-controlled player.2: Now accepting new client connections.For introductory help, type 'help'.&gt; quitGoodbye.[gregdek@ip-10-242-118-147 freeciv]$ </programlisting>
        <para>It works!  Of course, the only real way to tell if it works is to play a very long game of Freeciv, but that is an exercise left to the reader. </para>
      </section><section>
        <sectioninfo>
          <title>Review: What Just Happened? </title>
        </sectioninfo><para>Now that you've successfully transformed code into gold, step back and take a look at what's going on.  The process you just walked through is virtually identical to a large number of FOSS projects, so you're likely to see it often. </para>
        <para>Where do all of these complicated configuration files come from in the first place, and why? </para>
        <para>The goal of good build tools is to allow the developer to describe the project as simply as possible.  There's a lot of complexity, but it's important to isolate that complexity. </para>
        <para>Developers of an <emphasis>Autotools</emphasis>-based project seek to describe the build process of the entire project in two files:</para><itemizedlist>
          <listitem>
            <para>
              <programlisting format="linespecific">Makefile.am</programlisting>, which (basically) describes <emphasis>what</emphasis> needs to be built;</para>
          </listitem><listitem>
            <para>
              <programlisting format="linespecific">configure.in</programlisting> (or <programlisting format="linespecific">configure.ac</programlisting>), which (basically) describes <emphasis>how</emphasis> it needs to be built.</para>
          </listitem>
        </itemizedlist><para>These descriptions start out simple, but as the project grows in complexity, the descriptions of the project naturally grow as well.   </para>
        <para>Given these configuration files, you ran through the <emphasis>Autotools</emphasis> suite.  The purpose of the <emphasis>Autotools</emphasis> suite is to build a good <programlisting format="linespecific">configure</programlisting> script, which in turn builds a good <programlisting format="linespecific">Makefile</programlisting>, which in turn builds good executable binaries.</para><programlisting>+--------------+| configure.in || Makefile.am  |+--------------+       |       | Run autogen.sh        | (a wrapper for the Autogen tools)       v+--------------+|  configure   |+--------------+       |       | ./configure       | (repeat as necessary)       |       v+--------------+|   Makefile   |+--------------+       |       | make       |       v+--------------+|   Lots of    || successfully ||  compiled    ||    code      |+--------------+</programlisting>
        <para>Note: one of the things you did <emphasis>not</emphasis> do was to run the <programlisting format="linespecific">make install</programlisting> command, which would install Freeciv as an "official" binary that could be run by anyone on the system.  Since this is a development version, keep it in your own working directory, where you can happily break it as much as you want.</para><para>Again: very few people know every detail about <emphasis>Autotools</emphasis>, or about any build tools.  Experienced developers know as much as they need to know to get the job done, and they know where to look for help when they're stuck.</para>
      </section><section>
        <sectioninfo>
          <title>Exercise - Building Your Developer Workstation </title>
        </sectioninfo><para>By now, you have probably chosen a FOSS project that interests you.  Maybe you've been running that code from a pre-built binary that you downloaded, but now it's time to build the executables from scratch. </para>
        <para>Go check out the project's codebase from its SCM.  Walk through the entire build process.  In some cases, this might be pretty simple; it some cases, it might be quite complicated.  Use all of the tools available to you: install instructions, mailing lists, Google, IRC, etc.  Build the code, and then run the code; that's your goal. </para>
        <para>As you go through this build process, blog your process in a manner similar to how you walked through your build of Freeciv in this chapter. </para>
        <para>If the build was easy, proceed to the next exercise: create two separate builds in two separate directories -- the latest <emphasis>stable</emphasis> release, and the release from <emphasis>HEAD</emphasis>.  FOSS developers frequently do this to compare behaviors between versions.</para>
      </section><section>
        <sectioninfo>
          <title>Supplemental Reading </title>
        </sectioninfo><para>
          <ulink url="http://www.freesoftwaremagazine.com/user/28810"> John Calcote</ulink> wrote an excellent <ulink url="http://www.freesoftwaremagazine.com/books/autotools_a_guide_to_autoconf_automake_libtool"> guide to the GNU Autotools</ulink>.  If you find yourself working with a project that uses these tools, Calcote's work is a great online reference for beginners. </para><para>The much longer, but more definitive, work on <emphasis>GNU Autotools</emphasis> is <ulink url="http://sourceware.org/autobook/"> GNU Autoconf, Automake, and Libtool</ulink> (also known as "The Goat Book") by <ulink url="http://tkd.kicks-ass.net/"> Gary V. Vaughan</ulink>, <ulink url="http://www.air.net.au/~bje/"> Ben Elliston</ulink>, <ulink url="http://cafe.colorado.edu/~tromey/"> Tom Tromey</ulink> and <ulink url="http://www.airs.com/ian"> Ian Lance Taylor</ulink>.  Interestingly, it was a collaborative work written online by people who had never met in person.</para><para>The Mozilla project uses GNU Autotools for all of their projects, and their <ulink url="https://developer.mozilla.org/en/Build_Documentation"> build documentation</ulink> is available online.  It's a great exercise for those who want experience with building complex software designed to run on multiple platforms. </para><para>For those who want to start their own project and want it to be <emphasis>Autotools</emphasis>-friendly in the first place, here's a <ulink url="http://inti.sourceforge.net/tutorial/libinti/autotoolsproject.html"> great tutorial</ulink>.</para><para>
          <emphasis>GNU Autotools</emphasis> is very common, and this book had to start somewhere with an exploration of build automation -- but there are lots of other excellent build tools.  In the world of Java software, <ulink url="http://en.wikipedia.org/wiki/Apache_Ant"> Ant</ulink> and <ulink url="http://en.wikipedia.org/wiki/Apache_Maven"> Maven</ulink> are extremely popular choices.  Here's a fairly comprehensive list of <ulink url="http://en.wikipedia.org/wiki/List_of_build_automation_software"> popular build automation tools</ulink>.</para><para>Building software can be frustrating, and a lot of FOSS projects do a lot of things wrong.  To be clear: most proprietary software projects probably do a lot of things wrong too, but the failures of FOSS projects are visible for all to see -- and thus, to learn from.  <ulink url="http://fedoraproject.org/wiki/User:Spot"> Tom 'spot' Callaway</ulink> has compiled a list of things that projects do wrong, in a piece entitled <ulink url="https://www.theopensourceway.org/wiki/How_to_tell_if_a_FLOSS_project_is_doomed_to_FAIL"> How to tell if a FLOSS project is doomed to FAIL</ulink>.</para>
      </section>
    </section>
  </article>
</chapter>
